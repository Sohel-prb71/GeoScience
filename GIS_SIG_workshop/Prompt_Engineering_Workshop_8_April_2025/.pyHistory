# Import the arcpy module which gives access to ArcGIS tools import arcpy  # Always good practice to set environment settings # This will overwrite any existing outputs if needed arcpy.env.overwriteOutput = True  try:     # Provide basic user feedback     print("Starting selection process...")      # Reference the current ArcGIS Pro project (.aprx file)     aprx = arcpy.mp.ArcGISProject("CURRENT")     print("Successfully accessed current ArcGIS Project.")      # Reference the first map in the project (you can change 'Map' to your map's name if needed)     map_obj = aprx.listMaps()[0]     print(f"Accessed the map: {map_obj.name}")      # Find the layer called 'world_country_boundaries'     layer_name = 'world_country_boundaries'     layer = map_obj.listLayers(layer_name)[0]     print(f"Layer '{layer_name}' found.")      # Define the selection query     # This SQL expression selects features where the POP_RANK field is >= 15     selection_query = "POP_RANK >= 15"     print(f"Using selection query: {selection_query}")      # Make the selection on the layer     arcpy.management.SelectLayerByAttribute(         in_layer_or_view=layer,        # The layer to select from         selection_type="NEW_SELECTION",# Create a new selection         where_clause=selection_query   # The SQL expression     )     print("Feature selection complete.")      # Optional: Count selected features and report     count_result = arcpy.management.GetCount(layer)     selected_count = int(count_result.getOutput(0))     print(f"Number of features selected: {selected_count}")  except IndexError:     # This happens if the layer or map is not found     print(f"Error: Could not find the map or layer '{layer_name}'. Please check the names.") except arcpy.ExecuteError:     # Catch errors specific to ArcPy tools     print("ArcPy execution error:")     print(arcpy.GetMessages(2)) except Exception as e:     # Catch any other unexpected errors     print(f"An unexpected error occurred: {e}")  finally:     print("Script execution completed.")
# Import the arcpy module to access ArcGIS functions import arcpy import os  # Allow overwriting of outputs arcpy.env.overwriteOutput = True  # Define key variables layer_name = 'world_country_boundaries'              # Name of the layer to select from output_directory = r"C:\temp"                         # Directory to save the new shapefile output_shapefile = os.path.join(output_directory, "populated_world_countries.shp")  # Full path for new shapefile selection_query = "POP_RANK >= 15"                    # SQL query for selection  try:     print("Starting the feature selection and export process...")      # Access the current ArcGIS Pro project     aprx = arcpy.mp.ArcGISProject("CURRENT")     print("Accessed the current ArcGIS Project.")      # Access the first map in the project (modify if you have multiple maps)     map_obj = aprx.listMaps()[0]     print(f"Using map: {map_obj.name}")      # Access the specified layer by name     layer = map_obj.listLayers(layer_name)[0]     print(f"Found layer: {layer.name}")      # Apply the selection based on the SQL query     arcpy.management.SelectLayerByAttribute(         in_layer_or_view=layer,         selection_type="NEW_SELECTION",         where_clause=selection_query     )     print(f"Selected features where {selection_query}.")      # Count the number of selected features and report     count_result = arcpy.management.GetCount(layer)     selected_count = int(count_result.getOutput(0))     print(f"Number of features selected: {selected_count}")      # Check if any features were selected before exporting     if selected_count > 0:         # Export selected features to a new shapefile         arcpy.management.CopyFeatures(             in_features=layer,             out_feature_class=output_shapefile         )         print(f"Selected features exported successfully to: {output_shapefile}")     else:         print("No features matched the selection criteria. No shapefile was created.")  except IndexError:     # Handle the case where the layer or map is not found     print(f"Error: Could not find the map or layer named '{layer_name}'. Please check the name.") except arcpy.ExecuteError:     # Handle any ArcGIS-specific execution errors     print("ArcPy execution error:")     print(arcpy.GetMessages(2)) except Exception as e:     # Catch any other unexpected Python errors     print(f"An unexpected error occurred: {e}") finally:     print("Script execution completed.")
# Import arcpy module to work with ArcGIS Pro functionality import arcpy  # Allow outputs and settings to overwrite if necessary arcpy.env.overwriteOutput = True  # Define important variables layer_name = 'world_country_boundaries'   # Name of the layer you want to apply the definition query to definition_query = "POP_RANK >= 15"        # SQL statement for the definition query  try:     print("Starting the definition query update process...")      # Access the currently open ArcGIS Pro project     aprx = arcpy.mp.ArcGISProject("CURRENT")     print("Accessed the current ArcGIS Project.")      # Get the first map in the project (modify if you have multiple maps or know the name)     map_obj = aprx.listMaps()[0]     print(f"Using map: {map_obj.name}")      # Access the layer by its name     layer = map_obj.listLayers(layer_name)[0]     print(f"Found layer: {layer.name}")      # Apply the definition query to the layer     layer.definitionQuery = definition_query     print(f"Applied definition query: {definition_query}")      # Save changes to the project (optional but good practice if you want to persist the change)     aprx.save()     print("Project saved to retain definition query changes.")  except IndexError:     # Handle the case where the layer or map is not found     print(f"Error: Could not find the map or layer named '{layer_name}'. Please check the name.") except arcpy.ExecuteError:     # Handle ArcGIS-specific execution errors     print("ArcPy execution error:")     print(arcpy.GetMessages(2)) except Exception as e:     # Catch any unexpected Python errors     print(f"An unexpected error occurred: {e}") finally:     print("Script execution completed.")
# Import arcpy to work with ArcMap functions import arcpy  # Important: In ArcMap, the current map document is accessed like this mxd = arcpy.mapping.MapDocument("CURRENT")  # Define the name of the layer to modify layer_name = 'world_country_boundaries'  try:     print("Starting the symbology update process...")      # List layers in the current data frame     df = arcpy.mapping.ListDataFrames(mxd, "Layers")[0]     print(f"Accessed data frame: {df.name}")      # Find the specific layer by name     layer = arcpy.mapping.ListLayers(mxd, layer_name, df)[0]     print(f"Found layer: {layer.name}")      # Check if layer supports symbology changes     if layer.supports("SYMBOLIZATION"):         # Access the symbology properties         sym = layer.symbology          # Set the symbology to Graduated Colors         sym.updateRenderer('GraduatedColorsRenderer')         print("Updated symbology to Graduated Colors.")          # Set the classification field to 'POP_RANK'         sym.classificationField = 'POP_RANK'         print("Set classification field to 'POP_RANK'.")          # Set classification method to 'Equal Interval'         sym.classificationMethod = 'EqualInterval'         print("Set classification method to Equal Interval.")          # Set number of classes to 5         sym.numClasses = 5         print("Set number of classes to 5.")          # ---- Color selection reasoning ----         # We will use a blue-to-orange diverging color ramp.         # Blue and orange are distinguishable to most types of color blindness (like Deuteranopia and Protanopia).         # This diverging ramp is readable by individuals with color vision deficiencies,         # and blue/orange is a commonly recommended pairing for thematic maps representing quantities.         # ------------------------------------          # Set color ramp to a color-blind friendly blue-orange ramp         sym.colorRamp = arcpy.mapping.ListColorRamps(mxd, "Blue-Orange Diverging")[0]         print("Applied color-blind friendly Blue-Orange Diverging color ramp.")          # Refresh the active view and table of contents to see the changes         arcpy.RefreshActiveView()         arcpy.RefreshTOC()          print("Symbology updated successfully!")      else:         print(f"Error: Layer '{layer.name}' does not support symbology updates.")  except IndexError:     # Handle the case where the layer or data frame is not found     print(f"Error: Could not find the data frame or layer named '{layer_name}'. Please check the name.") except arcpy.ExecuteError:     # Handle ArcGIS-specific execution errors     print("ArcPy execution error:")     print(arcpy.GetMessages(2)) except Exception as e:     # Catch any unexpected Python errors     print(f"An unexpected error occurred: {e}") finally:     print("Script execution completed.")
# Script for ArcGIS Pro (ArcPy 3.x, e.g., 3.1, 3.2) # NOT for ArcMap (ArcPy 10.x)  import arcpy  # Provide simple user feedback print("Starting symbology update in ArcGIS Pro...")  # Define the layer name layer_name = 'world_country_boundaries'  try:     # Access the current ArcGIS Pro project     aprx = arcpy.mp.ArcGISProject("CURRENT")     print("Accessed current ArcGIS Pro project.")      # Access the first map in the project     map_obj = aprx.listMaps()[0]     print(f"Using map: {map_obj.name}")      # Access the layer by name     layer = map_obj.listLayers(layer_name)[0]     print(f"Found layer: {layer.name}")      # Check if the layer supports symbology updates     if layer.supports("SYMBOLS"):         sym = layer.symbology          # Set the symbology to Graduated Colors         sym.updateRenderer('GraduatedColorsRenderer')         print("Updated symbology to Graduated Colors.")          # Set the classification field         sym.renderer.classificationField = "POP_RANK"         print("Set classification field to 'POP_RANK'.")          # Set number of classes         sym.renderer.breakCount = 5         print("Set number of classes to 5.")          # Set classification method         sym.renderer.classificationMethod = 'EqualInterval'         print("Set classification method to Equal Interval.")          # ---- Color selection reasoning ----         # We'll use a blue-orange color ramp because blue and orange          # are distinguishable for people with color blindness (e.g., Deuteranopia, Protanopia).         # ------------------------------------                  # Apply a color ramp         color_ramp = aprx.listColorRamps("Blue-Orange Diverging")[0]         sym.renderer.colorRamp = color_ramp         print("Applied Blue-Orange Diverging color ramp for color blindness accessibility.")          # Apply the updated symbology back to the layer         layer.symbology = sym          # Save the project (optional)         aprx.save()         print("Project saved successfully.")      else:         print(f"Error: Layer '{layer.name}' does not support symbology updates.")  except IndexError:     print(f"Error: Could not find the map or layer named '{layer_name}'. Please check the name.") except arcpy.ExecuteError:     print("ArcPy execution error:")     print(arcpy.GetMessages(2)) except Exception as e:     print(f"An unexpected error occurred: {e}") finally:     print("Script execution completed.")
